{"version":3,"sources":["components/search_bar.js","components/video_list_item.js","components/video_list.js","components/video_detail.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","setState","onSearchTermChange","_this2","react_default","a","createElement","className","value","onChange","event","onInputChange","target","Component","VideoListItem","_ref","video","onVideoSelect","imageUrl","snippet","thumbnails","default","url","onClick","src","alt","title","VideoList","videoItems","videos","map","video_list_item","key","etag","VideoDetail","videoId","id","concat","description","Boolean","window","location","hostname","match","App","selectedVideo","YTSearch","_this3","videoSearch","_","debounce","search_bar","video_detail","video_list","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33e7e9df.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n// const SearchBar = () => {\r\n//   return <input />\r\n// };\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    term: ''\r\n  };\r\n}\r\n\r\nonInputChange(term) {\r\nthis.setState({term});\r\nthis.props.onSearchTermChange(term);\r\n}\r\n\r\nrender() {\r\n    return  (\r\n      <div className=\"search-bar\">\r\n      <input\r\n      value={this.state.term}\r\n      onChange={event => this.onInputChange(event.target.value)} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nconst VideoListItem = ({video, onVideoSelect}) => {\r\n  const imageUrl = video.snippet.thumbnails.default.url;\r\n  return (\r\n    <li onClick={() => onVideoSelect(video)} className=\"list-group-item\">\r\n      <div className=\"video-list media\">\r\n        <div className=\"media-left\">\r\n          <img className=\"media-object\" src={imageUrl} alt=\"\"/>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"media-body\">\r\n        <div className=\"media-heading\">\r\n        {video.snippet.title}\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default VideoListItem;\r\n","import React from 'react';\r\nimport VideoListItem from './video_list_item';\r\n\r\nconst VideoList = (props) => {\r\n  const videoItems = props.videos.map(video => {\r\n    return <VideoListItem key={video.etag} onVideoSelect={props.onVideoSelect} video={video} />\r\n  });\r\n  return (\r\n    <div className=\"col-md-4\">\r\n    <ul className={\"list-group \"}>\r\n    {videoItems}\r\n    </ul>\r\n</div>\r\n  );\r\n}\r\n\r\nexport default VideoList;\r\n","import React from 'react';\r\n// import \"../style/style.css\";\r\n\r\n\r\nconst VideoDetail = ({video}) => {\r\n  if(!video) {\r\n    return <div className=\"empty-search col-md-12\">\r\n        <p>Search for any YouTube videos</p>\r\n      </div>;\r\n  }\r\n  const videoId = video.id.videoId;\r\n  const url = `https://www.youtube.com/embed/${videoId}`;\r\nreturn (\r\n\r\n  <div className=\"col-md-8 video-detail \">\r\n    <div className=\"embed-responsive embed-responsive-16by9\">\r\n      <iframe className=\"embed-responsive-item\" src={url} title=\"youtube\">\r\n      </iframe>\r\n    </div>\r\n\r\n  <div className=\"details \">\r\n    <div> {video.snippet.title} </div>\r\n    <div> {video.snippet.description} </div>\r\n  </div>\r\n  </div>\r\n\r\n);\r\n};\r\n\r\nexport default VideoDetail;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import \"./style/bootstrap.css\";\r\nimport _ from 'lodash';\r\nimport React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport YTSearch from 'youtube-api-search';\r\nimport SearchBar  from './components/search_bar';\r\nimport VideoList from './components/video_list';\r\nimport VideoDetail from  './components/video_detail';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nconst API_KEY  = 'AIzaSyAX0A1GPj-uie_wODy0UdjYqv-NxKVwMmc';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n\r\n    super(props);\r\n    this.state = {\r\n          videos: [],\r\n          selectedVideo: null\r\n    };\r\n  }\r\n\r\n\r\n\r\n  videoSearch(term) {\r\n    YTSearch({key: API_KEY, term: term}, (videos) => {\r\n      this.setState({\r\n        videos: videos,\r\n        selectedVideo: videos[0]\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const videoSearch = _.debounce((term) => { this.videoSearch(term)}, 300);\r\n\r\n   return (\r\n      <div className=\"col-md-12\">\r\n  <SearchBar onSearchTermChange={videoSearch} />\r\n  <VideoDetail video={this.state.selectedVideo} />\r\n  <VideoList onVideoSelect={selectedVideo => this.setState({selectedVideo})} videos={this.state.videos} />\r\n  </div>\r\n);\r\n}\r\n\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root') );\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}